rule nopRule := for
  (!fid: int) in functionIds(),
  (!pc: int) in pcsForFunctionIdAndOpcode(!fid, NOP)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?lt: tuple<Value; ls{!fid}()>, ?gt: tuple<Value; gs()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0)
      => MState{!fid, !pc + 1}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0)
  ;

rule unreachableRule := for
  (!fid: int) in functionIds(),
  (!pc: int) in pcsForFunctionIdAndOpcode(!fid, UNREACHABLE)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?lt: tuple<Value; ls{!fid}()>, ?gt: tuple<Value; gs()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0)
      => Trap{!fid}(?gt, ?mem, ?at0, ?gt0)
  ;

rule blockRule := for
  (!fid: int) in functionIds(),
  (!pc: int) in blocksForFunctionId(!fid)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0)
      => MState{!fid, !pc + 1}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0)
  ;

rule loopRule := for
  (!fid: int) in functionIds(),
  (!pc: int) in loopsForFunctionId(!fid)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0)
      => MState{!fid, !pc + 1}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0)
  ;

rule endRule := for
  (!fid: int) in functionIds(),
  (!pc: int, !next: int) in endsForFunctionId(!fid)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0)
      => MState{!fid, !next}(?st[ss{!fid,!pc}()-ss{!fid,!next}():], ?gt, ?lt, ?mem, ?at0, ?gt0)
  ;

rule brRule := for
  (!fid: int) in functionIds(),
  (!pc: int)  in pcsForFunctionIdAndOpcode(!fid, BR),
  (!br: int)  in breakDestinations(!fid, !pc),
  (!n: int)   in getAmountOfReturnValuesInBlock(!fid, !pc)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0)
      => MState{!fid, !br}(?st[:!n] ++ ?st[ss{!fid,!pc}() - ss{!fid,!br}() + !n:], ?gt, ?lt, ?mem, ?at0, ?gt0)
  ;

rule brIfRule := for
  (!fid: int) in functionIds(),
  (!pc: int)  in pcsForFunctionIdAndOpcode(!fid, BRIF),
  (!br: int)  in breakDestinations(!fid, !pc),
  (!n: int)   in getAmountOfReturnValuesInBlock(!fid, !pc)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?nst: tuple<Value; ss{!fid,!br}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0),
    absneq(?st[0], mkValue(0)),
    ?nst = ?st[1 : (!n + 1)] ++ ?st[ss{!fid,!pc}() - ss{!fid,!br}() + !n:]
      => MState{!fid, !br}(?nst, ?gt, ?lt, ?mem, ?at0, ?gt0),
  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0),
    abseq(?st[0], mkValue(0))
      => MState{!fid, !pc + 1}(?st[1:], ?gt, ?lt, ?mem, ?at0, ?gt0)
  ;

rule brTableRule := for
  (!fid: int) in functionIds(),
  (!pc: int)  in pcsForFunctionIdAndOpcode(!fid, BRTABLE),
  (!sz: int)  in sizeOfBreakTable(!fid, !pc),
  (!idx: int) in interval(0, !sz - 1), // the last label is reached via the default rule
  (!br: int)  in breakTableDestinations(!fid, !pc, !idx),
  (!n: int)   in getAmountOfReturnValuesInBlock(!fid, !pc)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?nst: tuple<Value; ss{!fid,!br}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0),
    ?nst = ?st[1 : (!n + 1)] ++ ?st[ss{!fid,!pc}() - ss{!fid,!br}() + !n:],
    abseq(?st[0], mkValue(!idx))
      => MState{!fid, !br}(?nst, ?gt, ?lt, ?mem, ?at0, ?gt0)

  ;

rule brTableDefaultRule := for
  (!fid: int) in functionIds(),
  (!pc: int)  in pcsForFunctionIdAndOpcode(!fid, BRTABLE),
  (!sz: int)  in sizeOfBreakTable(!fid, !pc),
  (!br: int)  in breakTableDestinations(!fid, !pc, !sz - 1),
  (!n: int)   in getAmountOfReturnValuesInBlock(!fid, !pc)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?nst: tuple<Value; ss{!fid,!br}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0),
    ?nst = ?st[1 : (!n + 1)] ++ ?st[ss{!fid,!pc}() - ss{!fid,!br}() + !n:],
    absge(?st[0], mkValue(!sz-1))
      => MState{!fid, !br}(?nst, ?gt, ?lt, ?mem, ?at0, ?gt0)
  ;

rule ifThenElseRule := for
  (!fid: int) in functionIds(),
  //talk about this with Aleksandr
  //(!pc: int)  in pcsForFunctionIdAndOpcode(!fid, IF),
  (!pc: int)  in ifs(!fid),
  (!else: int) in elseForIf(!fid, !pc)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0),
    absneq(?st[0], mkValue(0))
      => MState{!fid, !pc + 1}(?st[1:], ?gt, ?lt, ?mem, ?at0, ?gt0),
  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0),
    abseq(?st[0], mkValue(0))
      => MState{!fid, !else}(?st[1:], ?gt, ?lt, ?mem, ?at0, ?gt0)
  ;

rule callRule := for
  (!fid: int) in functionIds(),
  (!pc: int)  in pcsForFunctionIdAndOpcode(!fid, CALLFUNCTION),
  (!cid: int) in immediateForFunctionIdAndPc(!fid, !pc)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>
         ,?at: tuple<Value; as{!cid}()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0),
    ?at = reverse{as{!cid}()}(?st[:as{!cid}()])
      => MState{!cid, 0}([], ?gt, ?at ++ [mkValue(0); ls{!cid}() - as{!cid}()], ?mem, ?at, ?gt),
  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>
         ,?at: tuple<Value; as{!cid}()>, ?rt: tuple<Value; rs{!cid}()>, ?rgt: tuple<Value; gs()>, ?rmem: Memory]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0),
    ?at = reverse{as{!cid}()}(?st[:as{!cid}()]),
    Return{!cid}(?rt, ?rgt, ?rmem, ?at, ?gt)
      => MState{!fid, !pc + 1}(?rt ++ ?st[as{!cid}():], ?rgt, ?lt, ?rmem, ?at0, ?gt0)
  ;

rule indirectCallRule := for
  (!fid: int) in functionIds(),
  (!pc: int)  in pcsForFunctionIdAndOpcode(!fid, CALLINDIRECT),
  (!idx: int, !cid: int) in possibleCallTargets(!fid, !pc)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>
         ,?at: tuple<Value; as{!cid}()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0),
    ?at = reverse{as{!cid}()}(?st[1:as{!cid}()+1]),
    abseq(?st[0], mkValue(!idx))
      => MState{!cid, 0}([], ?gt, ?at ++ [mkConst{0}(); ls{!cid}() - as{!cid}()], ?mem, ?at, ?gt),
  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>
         ,?at: tuple<Value; as{!cid}()>, ?rt: tuple<Value; rs{!cid}()>, ?rgt: tuple<Value; gs()>, ?rmem: Memory]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0),
    ?at = reverse{as{!cid}()}(?st[1:as{!cid}()+1]),
    abseq(?st[0], mkValue(!idx)),
    Return{!cid}(?rt, ?rgt, ?rmem, ?at, ?gt)
      => MState{!fid, !pc + 1}(?rt ++ ?st[as{!cid}() + 1:], ?rgt, ?lt, ?rmem, ?at0, ?gt0)
  ;

rule indirectCallRuleTrap := for
  (!fid: int) in functionIds(),
  (!pc: int)  in pcsForFunctionIdAndOpcode(!fid, CALLINDIRECT)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0),
    for (!idx:int, !cid: int) in possibleCallTargets(!fid, !pc): && absneq(?st[0], mkConst{!idx}())
      => Trap{!fid}(?gt, ?mem, ?at0, ?gt0)
  ;

rule functionExitRule := for
  (!fid: int) in functionIds(),
  (!pc: int)  in exitPointsForFunctionId(!fid)

  clause [?st: tuple<Value; ss{!fid,!pc}()>, ?gt: tuple<Value; gs()>, ?lt: tuple<Value; ls{!fid}()>, ?mem: Memory, ?at0: tuple<Value; as{!fid}()>, ?gt0: tuple<Value; gs()>]
    MState{!fid, !pc}(?st, ?gt, ?lt, ?mem, ?at0, ?gt0)
      => Return{!fid}(?st[:rs{!fid}()], ?gt, ?mem, ?at0, ?gt0)
  ;
