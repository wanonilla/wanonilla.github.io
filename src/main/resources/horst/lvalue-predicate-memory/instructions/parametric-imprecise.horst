rule dropRule := for
  (!fid: int) in functionIds(),
  (!pc: int) in pcsForFunctionIdAndOpcode(!fid, DROP)

  clause [?ctx: Context, ?x: LValue, ?st: tuple<LValue; ss{!fid,!pc}()-1>, ?gt: tuple<LValue; gs()>, ?lt: tuple<LValue; ls{!fid}()>, ?mem: Memory, ?tbl: Table, ?at0: tuple<LValue; as{!fid}()>, ?gt0: tuple<LValue; gs()>, ?mem0: Memory]
    MState{!fid, !pc}(?ctx, ?x :: ?st, ?gt, ?lt, ?mem, ?tbl, ?at0, ?gt0, ?mem0)
      => MState{!fid, !pc + 1}(?ctx, ?st, ?gt, ?lt, ?mem, ?tbl, ?at0, ?gt0, ?mem0)
  ;

rule selectRule := for
  (!fid: int) in functionIds(),
  (!pc: int) in pcsForFunctionIdAndOpcode(!fid, SELECT)

  clause [?ctx: Context, ?x: LValue, ?y: LValue, ?z: LValue, ?st: tuple<LValue; ss{!fid,!pc}()-3>, ?gt: tuple<LValue; gs()>, ?lt: tuple<LValue; ls{!fid}()>, ?mem: Memory, ?tbl: Table, ?at0: tuple<LValue; as{!fid}()>, ?gt0: tuple<LValue; gs()>, ?mem0: Memory]
    MState{!fid, !pc}(?ctx, ?x :: ?y :: ?z :: ?st, ?gt, ?lt, ?mem, ?tbl, ?at0, ?gt0, ?mem0),
    abseq(valueOf(?x), mkConst{0}())
      => MState{!fid, !pc + 1}(?ctx, raiseTo(?y,flub{2}([labelOf(?x), labelOfCtx(?ctx)])) :: ?st, ?gt, ?lt, ?mem, ?tbl, ?at0, ?gt0, ?mem0),

  clause [?ctx: Context, ?x: LValue, ?y: LValue, ?z: LValue, ?st: tuple<LValue; ss{!fid,!pc}()-3>, ?gt: tuple<LValue; gs()>, ?lt: tuple<LValue; ls{!fid}()>, ?mem: Memory, ?tbl: Table, ?at0: tuple<LValue; as{!fid}()>, ?gt0: tuple<LValue; gs()>, ?mem0: Memory]
    MState{!fid, !pc}(?ctx, ?x :: ?y :: ?z :: ?st, ?gt, ?lt, ?mem, ?tbl, ?at0, ?gt0, ?mem0),
    absneq(valueOf(?x), mkConst{0}())
      => MState{!fid, !pc + 1}(?ctx, raiseTo(?z,flub{2}([labelOf(?x),labelOfCtx(?ctx)])) :: ?st, ?gt, ?lt, ?mem, ?tbl, ?at0, ?gt0, ?mem0)
  ;