rule importedFunctionRule := for
  (!fid: int) in importedFunctionIds()

  clause [?p: Label, ?l: FlowLabel, ?from: int, ?gt: tuple<LValue; gs()>, ?lt: tuple<LValue; ls{!fid}()>, ?i: Value, ?v: LValue, ?size: LValue, ?tbl: Table, ?at0: tuple<LValue; as{!fid}()>, ?gt0: tuple<LValue; gs()>, ?mem0: Memory
         ,?rl: FlowLabel, ?rfrom: int, ?rt: tuple<LValue; rs{!fid}()>, ?rgt: tuple<LValue; gs()>, ?rtbl: Table
         ,?nv: LValue, ?nsize: LValue]
    MState{!fid, 0}(@Ctx(?p,?l,?from), [], ?gt, ?lt, @Mem(?i,?v,?size), ?tbl, ?at0, ?gt0, ?mem0),

    for (!i: int) in interval(0,rs{!fid}()),
        (!bw: int) in bitwidthForResult(!fid,!i),
        (!cr: bool, !ir: bool) in resultLabelForImportedFunctionAndPosition(!fid,!i):
      && isInRange{!bw}(valueOf(?rt[!i]))
      && labelOf(?rt[!i]) = flub{2}([?l, mkFlowLabel(mkLabel(!cr,!ir), ?p)]),

    for (!i: int) in interval(0,gs()),
        (!bw: int) in bitwidthForGlobal(!i),
        (!pass: bool, !cg: bool, !ig: bool) in globalOutLabelForImportedFunctionAndPosition(!fid,!i):
      && (!pass)
          ? (?gt[!i] = ?rgt[!i])
          : (isInRange{!bw}(valueOf(?rgt[!i])) && labelOf(?rgt[!i]) = flub{2}([?l, mkFlowLabel(mkLabel(!cg,!ig), ?p)])),

    for (!pass: bool, !cd: bool, !id: bool) in memoryDataOutLabelForImportedFunction(!fid):
      && (!pass)
          ? (?v = ?nv)
          : (isInRange{8}(valueOf(?nv)) && labelOf(?nv) = flub{2}([?l, mkFlowLabel(mkLabel(!cd,!id), ?p)])),

    for (!pass: bool, !cs: bool, !is: bool) in memorySizeOutLabelForImportedFunction(!fid):
      && (!pass)
          ? (?size = ?nsize)
          : (ileu{64}(valueOf(?size),valueOf(?nsize)) && ileu{64}(valueOf(?nsize),mkConst{mms() * pow{16}(2)}()) && labelOf(?nsize) = flub{2}([?l, mkFlowLabel(mkLabel(!cs,!is), ?p)])),

    for (!pass: bool, !ct: bool, !it: bool) in tableOutLabelForImportedFunction(!fid):
      && (!pass)
          ? (?tbl = ?rtbl)
          : (?rtbl = @Tbl(@TblImprecise, flub{2}([?l, mkFlowLabel(mkLabel(!ct,!it), ?p)]))),

    ?l = @Legal || (?rl = @Illegal && ?rfrom = ~1)

      => Return{!fid}(@Ctx(?p,?rl,?rfrom), ?rt, ?rgt, @Mem(?i, ?nv, ?nsize), ?rtbl, ?at0, ?gt0, ?mem0)
  ;