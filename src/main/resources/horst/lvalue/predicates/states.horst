pred Init{
    !fid: int
}:  tuple<LValue; as{!fid}()> *
    tuple<LValue; gs()>
    ;

pred MState{
    !fid: int,               // currently executing function
    !pc: int                      // currently executing op code position
}:  Context *
    tuple<LValue; ss{!fid,!pc}()> *      // the actual stack
    tuple<LValue; gs()> *    // store for the global variables
    tuple<LValue; ls{!fid}()> *     // store for the local variables
    Memory *                        // the memory of the module
    tuple<LValue; as{!fid}()> *  // the original arguments for the function
    tuple<LValue; gs()>      // the original global variables
    ;

pred MStateToJoin{
    !fid: int,               // currently executing function
    !pc: int                       // currently executing op code position
}:  int *
    tuple<LValue; ss{!fid,!pc}()> *      // the actual stack
    tuple<LValue; gs()> *    // store for the global variables
    tuple<LValue; ls{!fid}()> *     // store for the local variables
    Memory *                        // the memory of the module
    tuple<LValue; as{!fid}()> *  // the original arguments for the function
    tuple<LValue; gs()>      // the original global variables
    ;

pred ScopeExtend{!fid: int}: int * int;

pred Return{
    !fid: int               // function that return
}:  Label *
    int *
    tuple<LValue; rs{!fid}()> *     // store for the returned values
    tuple<LValue; gs()> *    // store for the global variables
    Memory *                        // (possibly modified) memory of the module
    tuple<LValue; as{!fid}()> *  // the original arguments for the function
    tuple<LValue; gs()>      // the original global variables
    ;

pred ReturnToJoin{
    !fid: int               // function that return
}:  Label *
    int *
    tuple<LValue; rs{!fid}()> *     // store for the returned values
    tuple<LValue; gs()> *    // store for the global variables
    Memory *                        // (possibly modified) memory of the module
    tuple<LValue; as{!fid}()> *  // the original arguments for the function
    tuple<LValue; gs()>      // the original global variables
    ;