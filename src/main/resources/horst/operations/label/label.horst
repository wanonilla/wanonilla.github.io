op mkLabel(c: bool, i: bool): Label := @Lbl(c,i);
op mkTop(): Label := @Lbl(true,false);
op mkUntrusted(): Label := @Lbl(false,false);
op mkSecret(): Label := @Lbl(true,true);
op mkBot(): Label := @Lbl(false,true);

op glb{!sz: int}(x: tuple<Label; !sz>): Label :=
  for (!i : int) in interval(1,!sz): acc: Label ->
    (match (acc,x[!i]) with
    | (@Lbl(c1,i1),@Lbl(c2,i2)) => @Lbl(c1 && c2, i1 || i2)
    | _                         => mkTop() // Should not happen!
    ), x[0]
  ;

op lub{!sz: int}(x: tuple<Label; !sz>): Label :=
  for (!i : int) in interval(1,!sz): acc: Label ->
    (match (acc,x[!i]) with
    | (@Lbl(c1,i1),@Lbl(c2,i2)) => @Lbl(c1 || c2, i1 && i2)
    | _                         => mkTop() // Should not happen!
    ), x[0]
  ;

op flowsTo(a: Label, b: Label): bool := match (a,b) with
  | (@Lbl(c1,i1),@Lbl(c2,i2)) => (~c1 || c2) && (i1 || ~i2)
  | _                         => false // Should not happen!
  ;

op mkFlowLabel(a: Label, b: Label): FlowLabel :=
  (flowsTo(a,b)) ? (@Legal) : (@Illegal)
  ;

op flub{!sz: int}(x: tuple<FlowLabel; !sz>): FlowLabel :=
  for (!i : int) in interval(1,!sz): acc: FlowLabel -> (acc = @Illegal) ? (@Illegal) : (x[!i]), x[0]
  ;